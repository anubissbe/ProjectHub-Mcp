const puppeteer = require('puppeteer');
const fs = require('fs');

async function captureScreenshots() {
    const browser = await puppeteer.launch({
        headless: 'new',
        args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    try {
        const page = await browser.newPage();
        await page.setViewport({ width: 1920, height: 1080 });

        // Create screenshots directory
        if (!fs.existsSync('screenshots')) {
            fs.mkdirSync('screenshots', { recursive: true });
        }

        console.log('üì∏ Capturing ProjectHub v2.0.0 screenshots...');

        // Login page
        console.log('üì∏ Capturing login page...');
        await page.goto('http://localhost:8090', { waitUntil: 'networkidle0' });
        await page.screenshot({ path: 'screenshots/01-login-page.png', fullPage: true });

        // Login with demo credentials
        console.log('üì∏ Logging in...');
        await page.type('input[placeholder="Email address"]', 'admin@projecthub.local');
        await page.type('input[placeholder="Password"]', 'admin123');
        await page.click('button[type="submit"]');
        await page.waitForTimeout(2000);

        // Dashboard
        console.log('üì∏ Capturing dashboard...');
        await page.screenshot({ path: 'screenshots/02-dashboard-light.png', fullPage: true });

        // Switch to dark mode
        console.log('üì∏ Switching to dark mode...');
        await page.click('button[aria-label="Toggle theme"]');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'screenshots/03-dashboard-dark.png', fullPage: true });

        // Switch back to light mode for other screenshots
        await page.click('button[aria-label="Toggle theme"]');
        await page.waitForTimeout(1000);

        // Projects page
        console.log('üì∏ Capturing projects page...');
        await page.click('text=Projects');
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'screenshots/04-projects-page.png', fullPage: true });

        // Create project modal
        console.log('üì∏ Capturing create project modal...');
        await page.click('text=Create Project');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'screenshots/05-create-project-modal.png', fullPage: true });
        await page.click('.modal-backdrop');
        await page.waitForTimeout(500);

        // Kanban board
        console.log('üì∏ Capturing kanban board...');
        await page.click('text=Board');
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'screenshots/06-kanban-board.png', fullPage: true });

        // Analytics
        console.log('üì∏ Capturing analytics...');
        await page.click('text=Analytics');
        await page.waitForTimeout(3000); // Wait for charts to load
        await page.screenshot({ path: 'screenshots/07-analytics-dashboard.png', fullPage: true });

        // Webhooks
        console.log('üì∏ Capturing webhooks...');
        await page.click('text=Webhooks');
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'screenshots/08-webhooks-management.png', fullPage: true });

        // Create webhook modal
        console.log('üì∏ Capturing create webhook modal...');
        await page.click('text=Create Webhook');
        await page.waitForTimeout(1000);
        await page.screenshot({ path: 'screenshots/09-create-webhook-modal.png', fullPage: true });
        await page.click('.modal-backdrop');
        await page.waitForTimeout(500);

        // Mobile responsive - Projects
        console.log('üì∏ Capturing mobile view...');
        await page.setViewport({ width: 375, height: 812 }); // iPhone X size
        await page.click('text=Projects');
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'screenshots/10-mobile-projects.png', fullPage: true });

        // Mobile responsive - Dashboard
        await page.click('text=Dashboard');
        await page.waitForTimeout(2000);
        await page.screenshot({ path: 'screenshots/11-mobile-dashboard.png', fullPage: true });

        console.log('‚úÖ Screenshots captured successfully!');
        console.log('üìÅ Screenshots saved in ./screenshots/ directory');

    } catch (error) {
        console.error('‚ùå Error capturing screenshots:', error);
    } finally {
        await browser.close();
    }
}

captureScreenshots();