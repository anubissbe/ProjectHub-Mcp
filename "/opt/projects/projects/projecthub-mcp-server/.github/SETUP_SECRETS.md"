# üîê GitHub Secrets Setup Guide

This guide explains how to set up the required GitHub secrets for the ProjectHub CI/CD pipeline.

## Required Secrets

### 1. **DOCKERHUB_TOKEN** (Required for Docker Hub Publishing)
Docker Hub access token for pushing images to Docker Hub.

**How to create:**
1. Go to [Docker Hub Security Settings](https://hub.docker.com/settings/security)
2. Click "New Access Token"
3. Give it a descriptive name (e.g., "projecthub-mcp-ci")
4. Set permissions to **Read, Write, Delete**
5. Copy the token and add it as a GitHub secret

**GitHub Secret Name:** `DOCKERHUB_TOKEN`

## Optional Secrets

### 2. **CODECOV_TOKEN** (Optional)
Token for uploading code coverage reports to Codecov.

**How to create:**
1. Go to [Codecov](https://codecov.io/)
2. Add your repository
3. Copy the upload token
4. Add it as a GitHub secret

**GitHub Secret Name:** `CODECOV_TOKEN`

## Automatic Docker Registry Access

The workflow automatically handles:
- **GitHub Container Registry (ghcr.io)**: Uses `GITHUB_TOKEN` (automatically provided)
- **Docker Hub**: Uses `DOCKERHUB_TOKEN` (must be added manually)

## How to Add Secrets to GitHub

1. Go to your repository on GitHub
2. Click on **Settings** ‚Üí **Secrets and variables** ‚Üí **Actions**
3. Click **New repository secret**
4. Enter the secret name exactly as shown above
5. Paste the token value
6. Click **Add secret**

## Docker Hub Repository Setup

Make sure these repositories exist on Docker Hub:
- `anubissbe/projecthub-mcp-frontend`
- `anubissbe/projecthub-mcp-backend`

The workflow will automatically create and push to these repositories.

## Testing the Setup

After setting up the secrets, you can test them by:

1. Creating a new tag:
   ```bash
   git tag v2.0.1
   git push origin v2.0.1
   ```

2. Or manually triggering the workflow:
   - Go to **Actions** ‚Üí **üöÄ ProjectHub CI/CD Pipeline**
   - Click **Run workflow**
   - Select the branch and release type

## Docker Images Produced

The CI/CD pipeline will create and push images to both registries:

### GitHub Container Registry
- `ghcr.io/anubissbe/projecthub-mcp-frontend:latest`
- `ghcr.io/anubissbe/projecthub-mcp-frontend:v2.0.0`
- `ghcr.io/anubissbe/projecthub-mcp-backend:latest`
- `ghcr.io/anubissbe/projecthub-mcp-backend:v2.0.0`

### Docker Hub
- `anubissbe/projecthub-mcp-frontend:latest`
- `anubissbe/projecthub-mcp-frontend:v2.0.0`
- `anubissbe/projecthub-mcp-backend:latest`
- `anubissbe/projecthub-mcp-backend:v2.0.0`

## Troubleshooting

### Docker Hub Login Failed
- Ensure the secret name is exactly `DOCKERHUB_TOKEN`
- Check that the token has push permissions
- Verify the token hasn't expired
- Make sure Docker Hub repositories exist

### GitHub Container Registry Failed
- This should work automatically with `GITHUB_TOKEN`
- Check repository permissions for packages

### Build Failed
- Check the workflow logs in the Actions tab
- Ensure all required secrets are set
- Verify branch protection rules aren't blocking the workflow

### Security Scan Failures
- Security scans are set to `continue-on-error: true`
- They won't block the pipeline but will report issues
- Check the Security tab for detailed results

## Workflow Features

The new unified CI/CD pipeline includes:

‚úÖ **Code Quality & Security Analysis**
- CodeQL security scanning
- Trivy filesystem vulnerability scanning
- Automated security reporting

‚úÖ **Comprehensive Testing**
- Frontend validation (Alpine.js structure)
- Backend testing (Express.js + Docker)
- Integration testing (API connectivity)

‚úÖ **Multi-Architecture Docker Builds**
- Linux AMD64 and ARM64 support
- Docker layer caching for faster builds
- Multi-registry publishing (GitHub + Docker Hub)

‚úÖ **Automated Releases**
- Semantic versioning support
- Automated changelog generation
- Release artifact packaging
- Deployment script generation

‚úÖ **Security & Monitoring**
- Container vulnerability scanning
- SARIF security reporting
- Dependency security tracking

‚úÖ **Smart Triggering**
- Push to main branch
- Tagged releases (v*.*.*)
- Manual workflow dispatch
- Pull request validation

**The workflow replaces all previous workflows with a single, comprehensive CI/CD pipeline.**