name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Frontend Tests
  frontend-test:
    name: 🎨 Frontend Tests
    runs-on: [self-hosted, docker, git-runner]
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 Run ESLint
      run: npm run lint
      
    - name: 🧪 Run tests
      run: npm run test:coverage
      
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v5
      continue-on-error: true
      with:
        files: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: 🏗️ Build frontend
      run: npm run build
      
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/dist/

  # Backend Tests
  backend-test:
    name: 🔧 Backend Tests
    runs-on: [self-hosted, docker, git-runner]
    defaults:
      run:
        working-directory: ./backend
        
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run tests
      run: npm test -- --coverage
      env:
        DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        NODE_ENV: test
        
    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v5
      continue-on-error: true
      with:
        files: ./backend/coverage/lcov.info
        flags: backend
        name: backend-coverage
        
    - name: 🏗️ Build backend
      run: npm run build

  # Docker Build and Security
  docker-security:
    name: 🐳 Docker & Security
    runs-on: [self-hosted, docker, git-runner]
    needs: [frontend-test, backend-test]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🏗️ Build frontend image
      uses: docker/build-push-action@v6
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: false
        tags: task-management-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🏗️ Build backend image
      uses: docker/build-push-action@v6
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: task-management-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # E2E Tests
  e2e-tests:
    name: 🧪 E2E Tests
    runs-on: [self-hosted, docker, git-runner]
    needs: [frontend-test, backend-test]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        
    - name: 🧹 Clean up any leftover containers and ports
      run: |
        echo "Starting comprehensive cleanup..."
        
        # Stop and remove any containers using our ports
        echo "Stopping containers on ports 3001, 5173, 5432..."
        docker stop $(docker ps -q --filter "publish=3001" --filter "publish=5173" --filter "publish=5432") 2>/dev/null || true
        docker rm $(docker ps -aq --filter "publish=3001" --filter "publish=5173" --filter "publish=5432") 2>/dev/null || true
        
        # Stop and remove task-management containers
        echo "Stopping task-management containers..."
        docker stop $(docker ps -q --filter "name=task-management") 2>/dev/null || true
        docker rm $(docker ps -aq --filter "name=task-management") 2>/dev/null || true
        
        # Remove task-management networks
        echo "Removing task-management networks..."
        docker network rm $(docker network ls -q --filter "name=task-management") 2>/dev/null || true
        
        # Kill processes using our ports
        echo "Freeing up ports 3001, 5173, 5432..."
        sudo fuser -k 3001/tcp 2>/dev/null || true
        sudo fuser -k 5173/tcp 2>/dev/null || true
        sudo fuser -k 5432/tcp 2>/dev/null || true
        
        # Wait for ports to be freed
        sleep 5
        
        # Verify ports are free
        echo "Verifying ports are free..."
        if netstat -tuln | grep -E ':(3001|5173|5432)\s'; then
          echo "Warning: Some ports are still in use"
          netstat -tuln | grep -E ':(3001|5173|5432)\s' || true
        else
          echo "All ports are free"
        fi
        
        echo "Cleanup completed successfully"
        
    - name: 🐳 Start services with health monitoring
      run: |
        echo "Starting services with docker-compose..."
        docker compose -f docker-compose.ci.yml up -d
        
        echo "Waiting for PostgreSQL to be ready..."
        timeout=60
        while [ $timeout -gt 0 ]; do
          if docker compose -f docker-compose.ci.yml exec postgres pg_isready -U test_user -d test_db >/dev/null 2>&1; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... ($timeout seconds remaining)"
          sleep 2
          timeout=$((timeout - 2))
        done
        
        if [ $timeout -le 0 ]; then
          echo "PostgreSQL failed to start within timeout"
          docker compose -f docker-compose.ci.yml logs postgres
          exit 1
        fi
        
        echo "Waiting for backend to be ready..."
        timeout=90
        while [ $timeout -gt 0 ]; do
          if curl -f http://localhost:3001/api/health >/dev/null 2>&1; then
            echo "Backend is ready!"
            break
          fi
          echo "Waiting for backend... ($timeout seconds remaining)"
          sleep 3
          timeout=$((timeout - 3))
        done
        
        if [ $timeout -le 0 ]; then
          echo "Backend failed to start within timeout"
          docker compose -f docker-compose.ci.yml logs backend
          exit 1
        fi
        
        echo "Waiting for frontend to be ready..."
        timeout=120
        while [ $timeout -gt 0 ]; do
          if docker compose -f docker-compose.ci.yml exec frontend wget --no-verbose --tries=1 --spider http://localhost:5173/ >/dev/null 2>&1; then
            echo "Frontend container health check passed!"
            # Also verify external access
            if curl -f http://localhost:5173/ >/dev/null 2>&1; then
              echo "Frontend is ready and accessible!"
              break
            else
              echo "Frontend container healthy but not externally accessible, retrying..."
            fi
          else
            echo "Waiting for frontend container... ($timeout seconds remaining)"
          fi
          sleep 3
          timeout=$((timeout - 3))
        done
        
        if [ $timeout -le 0 ]; then
          echo "Frontend failed to start within timeout"
          echo "Container logs:"
          docker compose -f docker-compose.ci.yml logs frontend
          echo "Container status:"
          docker compose -f docker-compose.ci.yml ps frontend
          exit 1
        fi
        
        echo "All services are ready!"
        docker compose -f docker-compose.ci.yml ps
        
    - name: 🔧 Install Chrome dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libnss3 \
          libatk-bridge2.0-0 \
          libdrm2 \
          libxkbcommon0 \
          libxcomposite1 \
          libxdamage1 \
          libxrandr2 \
          libgbm1 \
          libxss1 \
          libgconf-2-4 \
          libgtk-3-0 \
          libxshmfence1 \
          libasound2
        
    - name: 🧪 Install E2E test dependencies
      working-directory: ./tests
      run: npm ci
      
    - name: 🧪 Run E2E tests
      working-directory: ./tests
      run: npm test
      
    - name: 📸 Upload screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-screenshots
        path: tests/screenshots/
        
    - name: 📋 Debug logs (if failure)
      if: failure()
      run: |
        echo "=== DOCKER COMPOSE LOGS ==="
        docker compose -f docker-compose.ci.yml logs --tail=50 || true
        echo "=== CONTAINER STATUS ==="
        docker compose -f docker-compose.ci.yml ps || true
        echo "=== NETWORK STATUS ==="
        docker network ls | grep task-management || true
        echo "=== PORT STATUS ==="
        netstat -tuln | grep -E ':(3001|5173|5432)\s' || true
        
    - name: 🛑 Stop services and cleanup
      if: always()
      run: |
        echo "Stopping and cleaning up services..."
        docker compose -f docker-compose.ci.yml down --volumes --remove-orphans 2>/dev/null || true
        docker network prune -f 2>/dev/null || true
        echo "Services stopped and cleaned up"

  # Code Quality
  code-quality:
    name: 📊 Code Quality
    runs-on: [self-hosted, docker, git-runner]
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    # SonarCloud scan temporarily disabled to fix CI issues
    # - name: 🔍 SonarCloud Scan
    #   uses: SonarSource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
    - name: ⚠️ SonarCloud Skipped
      run: echo "SonarCloud scan temporarily disabled - can be re-enabled with SONAR_TOKEN"
        
    # CodeQL Analysis temporarily disabled to avoid conflict with GitHub's default setup
    # Re-enable by removing the following comment blocks and disabling default CodeQL in repo settings
    # - name: 📊 CodeQL Analysis
    #   uses: github/codeql-action/init@v3
    #   continue-on-error: true
    #   with:
    #     languages: javascript,typescript
    #     
    # - name: 📊 Perform CodeQL Analysis
    #   uses: github/codeql-action/analyze@v3
    #   continue-on-error: true
    
    - name: ⚠️ CodeQL Skipped
      run: echo "CodeQL analysis temporarily disabled - conflicts with GitHub default setup"

  # Performance Tests
  # Temporarily disabled - TODO: Re-enable once all other CI issues are resolved
  # performance:
  #   name: ⚡ Performance Tests
  #   runs-on: ubuntu-latest
  #   needs: [docker-security]

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy
    runs-on: [self-hosted, docker, git-runner]
    needs: [frontend-test, backend-test, docker-security, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📦 Checkout code
      uses: actions/checkout@v4
      
    - name: 🚀 Deploy to production
      run: |
        echo "🚀 Deploying to production..."
        echo "This would trigger your deployment process"
        # Add your deployment commands here
        
    - name: 📱 Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "Deployment ${{ job.status }} for Task Management WebUI"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}