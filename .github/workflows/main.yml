name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (major, minor, patch)'
        required: false
        type: choice
        options:
          - patch
          - minor
          - major

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: projecthub-mcp

permissions:
  contents: read
  packages: write
  issues: write
  pull-requests: write
  security-events: write
  actions: read

jobs:
  # ============================================
  # Code Quality & Security Checks
  # ============================================
  quality-checks:
    name: 📊 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,typescript
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🛡️ Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================
  # Frontend Tests & Build
  # ============================================
  frontend:
    name: 🎨 Frontend (React + TypeScript)
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: ./frontend
        run: npm ci
        
      - name: 🔍 Lint code
        working-directory: ./frontend
        run: npm run lint
        
      - name: 🧪 Run unit tests
        working-directory: ./frontend
        run: npm run test:coverage -- --run
        
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          
      - name: 🏗️ Build application
        working-directory: ./frontend
        run: npm run build
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 7

  # ============================================
  # Backend Tests & Build
  # ============================================
  backend:
    name: 🔧 Backend (Node.js + Express)
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
          
      - name: 📦 Install dependencies
        working-directory: ./backend
        run: npm ci
        
      - name: 🧪 Run tests
        working-directory: ./backend
        run: npm test -- --coverage
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          NODE_ENV: test
          JWT_SECRET: test-secret-key
          
      - name: 📊 Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
          
      - name: 🏗️ Build application
        working-directory: ./backend
        run: npm run build
        
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 7

  # ============================================
  # E2E Tests
  # ============================================
  e2e-tests:
    name: 🧪 E2E Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: 🐳 Start services
        run: |
          docker compose -f docker-compose.ci.yml up -d
          
          # Wait for services to be ready
          echo "Waiting for services..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/api/health >/dev/null 2>&1 && \
               curl -f http://localhost:5173/ >/dev/null 2>&1; then
              echo "Services are ready!"
              break
            fi
            echo "Waiting for services... ($i/30)"
            sleep 2
          done
          
      - name: 🧪 Install test dependencies
        working-directory: ./tests
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        working-directory: ./tests
        run: npx playwright install chromium
        
      - name: 🧪 Run E2E tests
        working-directory: ./tests
        run: npm test
        
      - name: 📸 Upload test artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-test-results
          path: |
            tests/screenshots/
            tests/test-results/
          retention-days: 7
          
      - name: 🛑 Stop services
        if: always()
        run: docker compose -f docker-compose.ci.yml down -v

  # ============================================
  # Docker Build & Push
  # ============================================
  docker:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [quality-checks, frontend, backend, e2e-tests]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    strategy:
      matrix:
        service: [frontend, backend]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            BUILD_DATE=${{ github.event.repository.updated_at }}
            VCS_REF=${{ github.sha }}
            VERSION=${{ steps.meta.outputs.version }}

  # ============================================
  # Release Creation
  # ============================================
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [docker]
    if: startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
      packages: write
      
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 📥 Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/
          
      - name: 🏷️ Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Get current version from package.json
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            
            # Calculate new version based on input
            case "${{ github.event.inputs.release_type }}" in
              major)
                VERSION="v$(npx semver $CURRENT_VERSION -i major)"
                ;;
              minor)
                VERSION="v$(npx semver $CURRENT_VERSION -i minor)"
                ;;
              patch)
                VERSION="v$(npx semver $CURRENT_VERSION -i patch)"
                ;;
              *)
                VERSION="v$(npx semver $CURRENT_VERSION -i patch)"
                ;;
            esac
            
            # Create and push tag
            git config user.name github-actions
            git config user.email github-actions@github.com
            git tag -a $VERSION -m "Release $VERSION"
            git push origin $VERSION
          else
            VERSION="v0.0.0-dev"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT
          
      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "# Changelog" > CHANGELOG_RELEASE.md
          echo "" >> CHANGELOG_RELEASE.md
          
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [[ -z "$LAST_TAG" ]]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          # Group commits by type
          echo "## 🚀 Features" >> CHANGELOG_RELEASE.md
          echo "$COMMITS" | grep -E "^- (feat|feature):" | sed 's/^- feat[ure]*: /- /' >> CHANGELOG_RELEASE.md || echo "- No new features" >> CHANGELOG_RELEASE.md
          
          echo -e "\n## 🐛 Bug Fixes" >> CHANGELOG_RELEASE.md
          echo "$COMMITS" | grep -E "^- fix:" | sed 's/^- fix: /- /' >> CHANGELOG_RELEASE.md || echo "- No bug fixes" >> CHANGELOG_RELEASE.md
          
          echo -e "\n## 📚 Documentation" >> CHANGELOG_RELEASE.md
          echo "$COMMITS" | grep -E "^- docs:" | sed 's/^- docs: /- /' >> CHANGELOG_RELEASE.md || echo "- No documentation updates" >> CHANGELOG_RELEASE.md
          
          echo -e "\n## 🔧 Other Changes" >> CHANGELOG_RELEASE.md
          echo "$COMMITS" | grep -vE "^- (feat|feature|fix|docs):" >> CHANGELOG_RELEASE.md || echo "- No other changes" >> CHANGELOG_RELEASE.md
          
          echo -e "\n## 🐳 Docker Images" >> CHANGELOG_RELEASE.md
          echo "- \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version_number }}\`" >> CHANGELOG_RELEASE.md
          echo "- \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.version_number }}\`" >> CHANGELOG_RELEASE.md
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version_number }}\`" >> CHANGELOG_RELEASE.md
          echo "- \`${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.version_number }}\`" >> CHANGELOG_RELEASE.md
          
      - name: 📦 Create release archives
        run: |
          # Create archives for each component
          cd artifacts/frontend-dist && tar czf ../../frontend-${{ steps.version.outputs.version }}.tar.gz . && cd ../..
          cd artifacts/backend-dist && tar czf ../../backend-${{ steps.version.outputs.version }}.tar.gz . && cd ../..
          
      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          body_path: CHANGELOG_RELEASE.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          generate_release_notes: true
          files: |
            frontend-*.tar.gz
            backend-*.tar.gz
            
      - name: 💬 Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Release ${{ steps.version.outputs.version }} created!**\n\nDocker images are available at:\n- \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:${{ steps.version.outputs.version_number }}\`\n- \`ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend:${{ steps.version.outputs.version_number }}\``
            })

  # ============================================
  # Dependency Updates (Weekly)
  # ============================================
  update-dependencies:
    name: 📦 Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && github.event.inputs.update_deps == 'true')
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          
      - name: 📦 Update Frontend Dependencies
        working-directory: ./frontend
        run: |
          npx npm-check-updates -u
          npm install
          npm audit fix || true
          
      - name: 📦 Update Backend Dependencies
        working-directory: ./backend
        run: |
          npx npm-check-updates -u
          npm install
          npm audit fix || true
          
      - name: 🧪 Test Updates
        run: |
          cd frontend && npm test -- --run && cd ..
          cd backend && npm test && cd ..
          
      - name: 📤 Create Pull Request
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore: update dependencies'
          title: '📦 Weekly dependency updates'
          body: |
            ## 📦 Automated Dependency Updates
            
            This PR contains automated dependency updates for both frontend and backend packages.
            
            ### Changes
            - Updated npm dependencies to their latest versions
            - Ran security audits and applied fixes where possible
            
            ### Testing
            - ✅ All tests pass
            - ✅ Security audit completed
            
            Please review and merge if all checks pass.
          branch: deps/weekly-update
          delete-branch: true

# Schedule weekly dependency updates
on:
  schedule:
    - cron: '0 0 * * 0' # Every Sunday at midnight UTC