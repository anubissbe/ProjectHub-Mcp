name: 🚀 ProjectHub Secure CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  DOCKERHUB_USERNAME: anubissbe
  IMAGE_NAME: projecthub-mcp

permissions:
  contents: read
  packages: write
  actions: read
  security-events: write

jobs:
  # Security scanning job
  security-scan:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml

      - name: 🔍 Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: 📤 Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔍 Run GitGuardian scan
        uses: GitGuardian/ggshield-action@v1
        if: ${{ secrets.GITGUARDIAN_API_KEY != '' }}
        continue-on-error: true
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_PULL_BASE_SHA: ${{ github.event.pull_request.base.sha }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  # Test job
  test:
    name: 🧪 Test Frontend
    runs-on: ubuntu-latest
    needs: [security-scan]
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🧪 Test Alpine.js Frontend
        working-directory: ./new-frontend
        run: |
          echo "✅ Testing Alpine.js frontend structure..."
          
          # Check required files exist
          test -f index-complete.html || { echo "❌ index-complete.html missing"; exit 1; }
          test -f app-webhook-final.js || { echo "❌ app-webhook-final.js missing"; exit 1; }
          test -f Dockerfile || { echo "❌ Dockerfile missing"; exit 1; }
          
          # Check HTML structure
          grep -q "x-data=\"projectHub()\"" index-complete.html || { echo "❌ Alpine.js initialization missing"; exit 1; }
          grep -q "Alpine.js" index-complete.html || { echo "❌ Alpine.js CDN missing"; exit 1; }
          
          # Check JavaScript functions
          grep -q "Alpine.data('projectHub'," app-webhook-final.js || { echo "❌ Main Alpine component missing"; exit 1; }
          grep -q "webhooks:" app-webhook-final.js || { echo "❌ Webhooks functionality missing"; exit 1; }
          
          echo "✅ All frontend tests passed!"

      - name: 🏗️ Test Docker Build
        working-directory: ./new-frontend
        run: |
          docker build -t test-frontend .
          echo "✅ Frontend Docker build successful!"

  # Build and push job
  build-and-push:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔑 Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔑 Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend
            ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: 🏗️ Build and push Frontend image
        uses: docker/build-push-action@v6
        with:
          context: ./new-frontend
          file: ./new-frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🛡️ Run Trivy on Docker image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend:latest
          format: 'sarif'
          output: 'docker-trivy-results.sarif'

      - name: 📤 Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-trivy-results.sarif'
          category: 'docker-scan'