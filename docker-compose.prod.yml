version: '3.8'

# Production Docker Compose Configuration for ProjectHub
# 
# IMPORTANT: Use with .env.production file containing:
#   JWT_SECRET=<secure-random-string>
#   POSTGRES_PASSWORD=<secure-password>
#   CORS_ORIGIN=https://your-domain.com
#
# Deploy with: docker-compose -f docker-compose.prod.yml --env-file .env.production up -d

services:
  postgres:
    image: postgres:15-alpine
    container_name: projecthub-postgres
    restart: always
    environment:
      POSTGRES_DB: projecthub
      POSTGRES_USER: projecthub
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - projecthub-db:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - projecthub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U projecthub"]
      interval: 10s
      timeout: 5s
      retries: 5
    # No ports exposed in production - only accessible within network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  backend:
    image: anubissbe/projecthub:latest
    container_name: projecthub-backend
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 3010
      DATABASE_URL: postgresql://projecthub:${POSTGRES_PASSWORD}@postgres:5432/projecthub
      CORS_ORIGIN: ${CORS_ORIGIN:?CORS_ORIGIN is required for production}
      JWT_SECRET: ${JWT_SECRET:?JWT_SECRET is required}
      # Additional production settings
      NODE_OPTIONS: "--max-old-space-size=512"
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - projecthub-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  frontend:
    image: anubissbe/projecthub-frontend:latest
    container_name: projecthub-frontend
    restart: always
    depends_on:
      - backend
    environment:
      API_URL: ${API_URL:-/api}
    networks:
      - projecthub-network
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: projecthub-nginx
    restart: always
    ports:
      - "${HTTPS_PORT:-443}:443"
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./nginx-prod.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./certbot/www:/var/www/certbot:ro
    networks:
      - projecthub-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  projecthub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  projecthub-db:
    name: projecthub-db
    driver: local